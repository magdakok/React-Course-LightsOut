{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","r","nrows","row","c","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","flat","every","el","setState","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e9febdc.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport \"./Cell.css\"\r\n\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - flipCellsAroundMe: a function rec'd from the board which flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling flipCellsAroundMe\r\n *\r\n **/\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    // call up to the board to flip cells around this cell\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n\r\n    return (\r\n        <td className={classes} onClick={this.handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Cell","import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\nclass Board extends Component {\r\n  static defaultProps ={\r\n    nrows: 5,\r\n    ncols: 5,\r\n    chanceLightStartsOn: 0.25\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasWon : false,\r\n      board: this.createBoard()\r\n    }\r\n    this.createBoard = this.createBoard.bind(this);\r\n  }\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n  createBoard() {\r\n    let board = [];\r\n      for (let r=0; r < this.props.nrows; r++){\r\n        let row = [];\r\n        for (let c=0; c < this.props.ncols; c++){\r\n          row.push(Math.random()<this.props.chanceLightStartsOn)\r\n        }\r\n        board.push(row);\r\n      }\r\n    return board\r\n  }\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    flipCell(y,x);\r\n    flipCell(y,x-1);\r\n    flipCell(y,x+1);\r\n    flipCell(y-1,x);\r\n    flipCell(y+1,x);\r\n    let hasWon = board.flat().every(el => el === false);\r\n\r\n    this.setState({board: board, hasWon: hasWon});\r\n  }\r\n\r\n\r\n  /** Render game board or winning message. */\r\n\r\n  render() {\r\n    if(this.state.hasWon) { return <div>\r\n      <span className=\"neon\">You</span>\r\n      <span className=\"flux\">Won</span>\r\n      </div> }\r\n    let tblBoard = [];\r\n    for (let r=0; r < this.props.nrows; r++){\r\n      let row = [];\r\n      for (let c=0; c < this.props.ncols; c++){\r\n        let coord = `${r}-${c}`;\r\n        row.push(<Cell isLit={this.state.board[r][c]} key={coord} flipCellsAroundMe={()=> this.flipCellsAround(coord)}/>)\r\n      }\r\n      tblBoard.push(<tr>{row}</tr>);\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <span className=\"neon\">Lights</span>\r\n        <span className=\"flux\">Out</span>\r\n        <table className=\"Board\">\r\n          <tbody>\r\n            {tblBoard}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}